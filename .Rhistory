Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int_KIDNEY.xlsx")
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_KIDNEY.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
rm(list = ls())
# 定义函数,质荷比-强度匹配，可更改ppm阈值,默认为5ppm
Extractint <- function(Intensity, Intensitys, next_Intensitys, thr=10*10^(-6)){
results <- abs((Intensitys-Intensity)/Intensity)
potential_Intensitys <- next_Intensitys[results < thr]
if(length(potential_Intensitys) == 0){
return(NA)
}
return(max(potential_Intensitys))
}
# 定义函数,过滤成像效果不好的离子，可更改阈值
Scanint <- function(df, Intensity=100, num=2){
remove_ids <- NULL
select_df <- df[df$IsotopeLabel == "C12 PARENT", ]
for(row in 1:nrow(select_df)){
if(sum(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")] < Intensity) > num){
remove_ids <- c(remove_ids, unlist(select_df[row, "ID"]))
}
}
remain_df <- df[df$ID %in% remove_ids == F, ]
return(remain_df)
}
# 定义函数,保留MSI可见的标记离子
Filterint <- function(df, Intensity=10){
new_df <- df[, 1:6]
for(col in c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")){
Intensitys <- unlist(df[, col])
new_df[, col] <- ifelse(Intensitys == 0, 1, Intensitys)
}
remove_ids2 <- NULL
remove_ids3 <- NULL
select_df <- new_df[new_df$IsotopeLabel == "C13-label-2",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(unlist(select_df[row, "ID"]) == 2){
print(sum_Intensity1)
print(sum_Intensity2)
print(sum_Intensity1/sum_Intensity2)
}
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids2 <- c(remove_ids2, unlist(select_df[row, "ID"]))
}
}
select_df <- new_df[new_df$IsotopeLabel == "C13-label-3",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids3 <- c(remove_ids3, unlist(select_df[row, "ID"]))
}
}
remove_ids <- NULL
for(id in remove_ids2){
if(id %in% remove_ids3){
remove_ids <- c(remove_ids, id)
}
}
print(remove_ids)
remain_df <- df[(df$ID %in% remove_ids) == F,]
return(remain_df)
}
# 导入MSI数据及Target列表,MSIdata如果有空格需填充为0
# MSI数据更改名称为"Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03"
MSIdata <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="LIVER")
Target <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="Database")
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int_LIVER.xlsx")
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_LIVER.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
rm(list = ls())
rm(list = ls())
# 定义函数,质荷比-强度匹配，可更改ppm阈值,默认为5ppm
Extractint <- function(Intensity, Intensitys, next_Intensitys, thr=10*10^(-6)){
results <- abs((Intensitys-Intensity)/Intensity)
potential_Intensitys <- next_Intensitys[results < thr]
if(length(potential_Intensitys) == 0){
return(NA)
}
return(max(potential_Intensitys))
}
# 定义函数,过滤成像效果不好的离子，可更改阈值
Scanint <- function(df, Intensity=100, num=2){
remove_ids <- NULL
select_df <- df[df$IsotopeLabel == "C12 PARENT", ]
for(row in 1:nrow(select_df)){
if(sum(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")] < Intensity) > num){
remove_ids <- c(remove_ids, unlist(select_df[row, "ID"]))
}
}
remain_df <- df[df$ID %in% remove_ids == F, ]
return(remain_df)
}
# 定义函数,保留MSI可见的标记离子
Filterint <- function(df, Intensity=10){
new_df <- df[, 1:6]
for(col in c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")){
Intensitys <- unlist(df[, col])
new_df[, col] <- ifelse(Intensitys == 0, 1, Intensitys)
}
remove_ids2 <- NULL
remove_ids3 <- NULL
select_df <- new_df[new_df$IsotopeLabel == "C13-label-2",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(unlist(select_df[row, "ID"]) == 2){
print(sum_Intensity1)
print(sum_Intensity2)
print(sum_Intensity1/sum_Intensity2)
}
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids2 <- c(remove_ids2, unlist(select_df[row, "ID"]))
}
}
select_df <- new_df[new_df$IsotopeLabel == "C13-label-3",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids3 <- c(remove_ids3, unlist(select_df[row, "ID"]))
}
}
remove_ids <- NULL
for(id in remove_ids2){
if(id %in% remove_ids3){
remove_ids <- c(remove_ids, id)
}
}
print(remove_ids)
remain_df <- df[(df$ID %in% remove_ids) == F,]
return(remain_df)
}
# 导入MSI数据及Target列表,MSIdata如果有空格需填充为0
# MSI数据更改名称为"Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03"
MSIdata <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="LUNG")
Target <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="Database")
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int_LUNG.xlsx")
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_LUNG.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
rm(list = ls())
# 定义函数,质荷比-强度匹配，可更改ppm阈值,默认为5ppm
Extractint <- function(Intensity, Intensitys, next_Intensitys, thr=10*10^(-6)){
results <- abs((Intensitys-Intensity)/Intensity)
potential_Intensitys <- next_Intensitys[results < thr]
if(length(potential_Intensitys) == 0){
return(NA)
}
return(max(potential_Intensitys))
}
# 定义函数,过滤成像效果不好的离子，可更改阈值
Scanint <- function(df, Intensity=100, num=2){
remove_ids <- NULL
select_df <- df[df$IsotopeLabel == "C12 PARENT", ]
for(row in 1:nrow(select_df)){
if(sum(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")] < Intensity) > num){
remove_ids <- c(remove_ids, unlist(select_df[row, "ID"]))
}
}
remain_df <- df[df$ID %in% remove_ids == F, ]
return(remain_df)
}
# 定义函数,保留MSI可见的标记离子
Filterint <- function(df, Intensity=10){
new_df <- df[, 1:6]
for(col in c("Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03")){
Intensitys <- unlist(df[, col])
new_df[, col] <- ifelse(Intensitys == 0, 1, Intensitys)
}
remove_ids2 <- NULL
remove_ids3 <- NULL
select_df <- new_df[new_df$IsotopeLabel == "C13-label-2",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(unlist(select_df[row, "ID"]) == 2){
print(sum_Intensity1)
print(sum_Intensity2)
print(sum_Intensity1/sum_Intensity2)
}
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids2 <- c(remove_ids2, unlist(select_df[row, "ID"]))
}
}
select_df <- new_df[new_df$IsotopeLabel == "C13-label-3",]
for(row in 1:nrow(select_df)){
sum_Intensity1 <- sum(unlist(select_df[row, c("Glc_Label_01", "Glc_Label_02", "Glc_Label_03")]))
sum_Intensity2 <- sum(unlist(select_df[row, c("Unlabel_01", "Unlabel_02", "Unlabel_03")]))
if(sum_Intensity1/sum_Intensity2 < Intensity){
remove_ids3 <- c(remove_ids3, unlist(select_df[row, "ID"]))
}
}
remove_ids <- NULL
for(id in remove_ids2){
if(id %in% remove_ids3){
remove_ids <- c(remove_ids, id)
}
}
print(remove_ids)
remain_df <- df[(df$ID %in% remove_ids) == F,]
return(remain_df)
}
# 导入MSI数据及Target列表,MSIdata如果有空格需填充为0
# MSI数据更改名称为"Unlabel_01", "Unlabel_02", "Unlabel_03", "Glc_Label_01", "Glc_Label_02", "Glc_Label_03"
MSIdata <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="PANCREASE")
Target <- read_xlsx("20240202-葡萄糖标记-只分析GC24.xlsx", sheet ="Database")
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int_PANCREASE.xlsx")
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_PANCREASE.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
devtools::document()
devtools::build()
?Scanint
devtools::build()
library(geoRge)
devtools::build()
setwd("D:/MSIFLUXER/MSIFluxer")
install.packages("MSIFluxer")
?Extractint
MSIdata <- read.csv(system.file("data", "Example-13C-Glucose infusion.csv", package = "MSIFluxer"))
Target <- read.csv(system.file("data", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
devtools::document()
devtools::build()
library(MSIFluxer)
MSIdata <- read.csv(system.file("data", "Example-13C-Glucose infusion.csv", package = "MSIFluxer"))
library(MSIFluxer)
devtools::build()
library(MSIFluxer)
MSIdata <- read.csv(system.file("extdata", "Example-13C-Glucose infusion.csv", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
MSIdata <- read.csv(system.file("extdata", "Example-13C-Glucose infusion.csv", package = "MSIFluxer"))
MSIdata <- read.csv(system.file("extdata", "Example-13C-Glucose infusion.CSV", package = "MSIFluxer"))
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion.CSV", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::build()
devtools::document()
devtools::build()
library(MSIFluxer)
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::document()
devtools::build()
library(MSIFluxer)
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion.CSV", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::document()
devtools::build()
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion.CSV", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::build()
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion.CSV", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
View(Target2)
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::build()
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::build()
library(MSIFluxer)
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion-NEG.CSV", package = "MSIFluxer"))
rm(list = ls())
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion-NEG.CSV", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
View(Target3)
View(Target)
View(Target1)
View(Target1)
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=2)
View(Target2)
MSIdata <- read.csv(system.file("extdata", "test-msidata.csv", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "test-msidatabase.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
devtools::document()
devtools::build()
library(MSIFluxer)
MSIdata <- read.csv(system.file("extdata", "test-msidata.csv", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "test-msidatabase.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
View(Target)
Target1 <- Scanint(Target,Intensity=100, num=2)
View(Target1)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
devtools::document()
devtools::document()
2
devtools::document()
devtools::build()
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
library(tidyverse)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int.xlsx")
library(readxl)
write.xlsx(Result_Int,file = "Result_Int.xlsx")
library(openxlsx)
write.xlsx(Result_Int,file = "Result_Int.xlsx")
rm(list = ls())
MSIdata <- read.csv(system.file("extdata", "test-msidata.csv", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
View(Target1)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
write.xlsx(Result_Int,file = "Result_Int2.xlsx")
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int2.xlsx")
rm(list = ls())
devtools::document()
devtools::build()
library(MSIFluxer)
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
View(Target)
MSIdata <- read.csv(system.file("extdata", "test-msidata.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
View(Target1)
Target2 <- Filterint(Target1, Intensity=10)
View(Target2)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
write.xlsx(Result_Int,file = "Result_Int3.xlsx")
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int3.xlsx")
rm(list = ls())
MSIdata <- read.csv(system.file("extdata", "Example-U13C-Glucose infusion-NEG.CSV", package = "MSIFluxer"))
Target <- read.csv(system.file("extdata", "U13C-Glucose-Negative.csv", package = "MSIFluxer"))
# 强度提取匹配
for(i in seq(1, ncol(MSIdata), 2)){
print(i)
col <- colnames(MSIdata)[i]
select_Intensitys <- apply(Target[, 1, drop=F], 1, Extractint, unlist(MSIdata[, i]), unlist(MSIdata[, i+1]))
Target[, col] <- select_Intensitys
Target[is.na(Target[, col]), col] <- 0
}
Target1 <- Scanint(Target,Intensity=100, num=2)
Target2 <- Filterint(Target1, Intensity=10)
# 离子强度匹配及筛选结果导出，为“Result_Int”
Compound_new <- Target2 %>% select(Compound,ID) %>% mutate(Compound_new = pmap_chr(., str_c, sep = "_")) %>% select(Compound_new)
Target3 <- cbind(Compound_new, Target2 %>% select(Formula,IsotopeLabel,Unlabel_01:Glc_Label_03)) %>% rename(Compound = Compound_new)
Result_Int = list("Extract_Int" = Target,"Scan_Int" = Target1,"Filter_Int"=Target2,"Input_Int"=Target3)
write.xlsx(Result_Int,file = "Result_Int_example.xlsx")
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_example.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
library(accucor)
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int_example.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
# 天然同位素校正，结果自动导出为“Result_Int_corrected”
Corrected <- natural_abundance_correction(path = "Result_Int3.xlsx",sheet = "Input_Int",resolution = 140000,purity = 0.99)
devtools::document()
devtools::build()
rm(list = ls())
